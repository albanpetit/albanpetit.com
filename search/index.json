[{"content":"In this article, we delve into the heart of my latest project: a custom PCB designed around a MEMS accelerometer. This project, although relatively simple in its application, uses an extremely interesting electronic component due to its internal operation, a MEMS accelerometer. This electronic board will be used later in other projects.\nMEMS Accelerometers MEMS accelerometers are compact devices that exploit microfabrication technology to integrate mechanical elements, sensors, actuators, and electronics on a tiny silicon chip. At the core of these devices lies a MEMS structure, often composed of microstructures such as beams or cantilevers, which respond to external forces.\nOperating Principle The operating principle of MEMS accelerometers is based on the concept of inertia. According to Newton\u0026rsquo;s second law of motion, an object at rest tends to stay at rest, and an object in motion tends to stay in motion unless acted upon by an external force. MEMS accelerometers capitalize on this principle to measure acceleration.\nWithin the MEMS structure, there is typically a mass suspended by flexible beams. When the device experiences acceleration, the mass resists this change due to inertia, causing a deflection in the beams. This deflection is then converted into an electrical signal by a sensor, such as a capacitive or piezoelectric sensor, integrated into the MEMS structure.\nTranslating Mechanical Motion into Electrical Signals As the accelerometer encounters acceleration, the movement of the mass induces a change in capacitance or generates a voltage proportional to the applied force. This electrical signal is then processed and translated into meaningful data, allowing us to quantify the acceleration experienced by the device.\nElectronic Board Design This PCB is relatively simple and small in size, allowing it to integrate seamlessly into any project. The presence of an AP2112 voltage regulator allows the regulation of the input voltage to 3.3V, enabling the use of this electronic board with devices providing 5V by default, such as Arduino, for example. Its dimensions are 19mm x 24mm, with two connectors: one for 5V power supply, and the other for analog acceleration data on the three axes: x, y, z.\nMain Components On this electronic board, two components are the most important: the regulator and the accelerometer.\nAP2112K-3.3 This linear regulator in SOT-23-5 package is extremely common, used in many hobbyist electronic boards. It appears in many designs from Adafruit or Sparkfun. It is a fixed voltage low-dropout linear regulator, available in multiple variants: 1.2V, 1.8V, 2.5V, 2.6V, and 3.3V. This project uses the 3.3V version. It has all the necessary characteristics for this project:\nOutput voltage accuracy: ±1.5% Output current: 600 mA (minimum) Foldback short-circuit protection: 50 mA Enable function for VOUT enable/disable Low dropout voltage (3.3V): 250 mV (typ.) @IOUT = 600 mA Excellent load regulation: 0.2%/A (typ.) Excellent line regulation: 0.02%/V (typ.) Low quiescent current: 55µA (typ.) Low standby current: 0.01 µA (typ.) Low output noise: 50µVRMS PSRR: 100 Hz -65 dB, 1 kHz -65 dB OTSD protection Stable with a flexible capacitor of 1.0 µF: ceramic, tantalum, and aluminum electrolytic Operating temperature range: -40°C to +85°C Additionally, it is extremely simple to implement. The provided datasheet contains all the necessary peripheral components required for its proper operation. Two smoothing capacitors with a value of 1uF on the input and output voltage and a 100K ohm resistor to allow constant ignition are sufficient.\nADXL335 The heart of the project, the Analog Devices ADXL335 accelerometer, has a vibration sensitivity of 3g. Available only in LFCSP-16 format, it is relatively easy to implement as well, partly due to its small size (4mm x 4mm).\nThis component has three analog outputs, each responsible for providing acceleration information along one of the three dimensions. A specific function is available on these analog outputs, described in the technical documentation. A 32K ohm resistor is placed on each of them. These resistors, via the addition of a capacitor, allow the creation of a low-pass filter, thus reducing noise on the data and the effect of aliasing from oversampling. The recommended minimum value for these capacitors is 4.7nF according to the technical documentation.\nIt is also interesting to note from this documentation that the maximum useful frequency of each axis is different: 1600Hz for X and Y, and only 500Hz for Z.\nThe positioning of this component is therefore extremely important depending on its usage.\nComponents List Although they are the most important, other components are still present on this board:\nDesignation Reference Quantity Format Datasheet ADXL335 U1 1 LFCSP-16 ADXL335 AP2112K-3.3 U2 1 SOT-23-5 AP2112 SMD Resistor 100k ohm R2 1 0603 - SMD Resistor 160 ohm R1 1 0603 - LED D1 1 0603 - SMD Capacitor 1uF C4,C5 2 0603 - SMD Capacitor 4.7nF C1-C3 3 0603 - Power Connector J1 1 JST PH B2B - Signal Connector J2 1 JST PH B3B - Schematic and Electronic Board All design and manufacturing files are available in this GitHub repository: ADXL-335. However, here is a quick description of the different sections of this printed circuit board:\nA simple LED responsible for displaying the power status of the electronic board, accompanied by its resistor to prevent any smoke emission. The power stage of the electronic board, based on the AP2112K-3.3, has three smoothing capacitors to ensure its proper function. This information is available directly within the component datasheet. The MEMS accelerometer ADXL335, with its three capacitors, one for each analog output of this component. They filter out high frequencies, thus reducing noise and aliasing as mentioned earlier. The JST-PH connector with three pins, one for each analog output. The power supply JST-PH connector for 5 volts. Electronic Board Manufacturing Living in France, the usual (Chinese) suppliers of electronic boards can be relatively expensive due to shipping costs. I mainly order my boards from Aisler, a German board manufacturer. Always efficient, well-documented, and affordable, they have always perfectly fulfilled my orders. They even have a plugin available on KiCad to facilitate ordering, Aisler push for KiCad. A simple press on the icon and the project is directly transmitted to the website to place the order.\nAisler offers PCBs with ENIG (Electroless Nickel Immersion Gold) treatment, as well as the possibility of having stencils made for solder paste.\nUsing a stencil provides solutions for soldering PCBs much more precisely than conventional methods with a soldering iron. The idea is to have a stencil made for each electronic circuit, allowing solder paste to be deposited on the surfaces that will later receive solder. Subsequently, electronic components are placed in their final positions. Once all the components are placed, a hotplate or reflow oven can be used to melt the solder paste, resulting in perfectly homogeneous solder joints.\nGreatScott explains and presents this method in one of his videos: Here are some photos of different stages of this realization:\nImplementation Initial Tests Once the electronic board is operational, I performed some tests with an oscilloscope to avoid trying to interface a malfunctioning electronic board with a microcontroller for hours. Accompanied by one of my favorite tools, the Sensepeek measurement probes, the results seem perfectly consistent with the datasheet of the ADXL335.\nRaspberry Pi Pico The Raspberry Pi Pico is an electronic board hosting the RP2040, an ARM architecture microcontroller designed by the Raspberry Pi Foundation. Announced in January 2021, the RP2040 is the first microcontroller developed by the foundation.\nThis ARM architecture microcontroller has two cores clocked at 133 MHz, offering high performance. The Pico has 264 KB of SRAM and 2 MB of flash memory, providing sufficient storage space for programs and data. It is equipped with 26 digital I/O pins, three of which can be used as analog inputs. Additionally, it is equipped with two clock pins, two power pins, and many other pins for serial communication and bus interfaces.\nTherefore, I used this microcontroller to verify the proper functioning of the electronic board.\nConnection The electronic setup is relatively simple, the daughter electronic board must be powered by the + and - interfaces, the Raspberry Pico has interfaces 40 and 38 for this purpose. Then the X, Y, and Z outputs of our board must be respectively connected to interfaces 31, 32, and 34 of the Pico.\nThe diagram below is of great help to quickly identify the connection interfaces in question:\nArduino Code First and foremost, the Pico is not naturally available for use in the Arduino software, an installation is required. To do this, you need to add this URL: https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json within the Additional Board Manager URLs option in the preferences panel of Arduino: File \u0026gt; Preferences like this:\nThen the board manager will help us install the now referenced board:\nThen all you have to do is create an Arduino script that reads the voltage values ​​from the analog interfaces 31, 32, and 34 of the Pico. Here is an example of a functional script:\nconst int xInput = 26; const int yInput = 27; const int zInput = 28; // initialize minimum and maximum Raw Ranges for each axis int RawMin = 0; int RawMax = 1023; // Take multiple samples to reduce noise const int sampleSize = 10; void setup() { Serial.begin(9600); } void loop() { //Read raw values int xRaw = ReadAxis(xInput); int yRaw = ReadAxis(yInput); int zRaw = ReadAxis(zInput); // Convert raw values to \u0026#39;milli-Gs\u0026#34; long xScaled = map(xRaw, RawMin, RawMax, -3000, 3000); long yScaled = map(yRaw, RawMin, RawMax, -3000, 3000); long zScaled = map(zRaw, RawMin, RawMax, -3000, 3000); // re-scale to fractional Gs float xAccel = xScaled / 1000.0; float yAccel = yScaled / 1000.0; float zAccel = zScaled / 1000.0; Serial.print(\u0026#34; X, Y, Z :: \u0026#34;); Serial.print(xRaw); Serial.print(\u0026#34;, \u0026#34;); Serial.print(yRaw); Serial.print(\u0026#34;, \u0026#34;); Serial.print(zRaw); Serial.print(\u0026#34; :: \u0026#34;); Serial.print(xAccel,0); Serial.print(\u0026#34;G, \u0026#34;); Serial.print(yAccel,0); Serial.print(\u0026#34;G, \u0026#34;); Serial.print(zAccel,0); Serial.println(\u0026#34;G\u0026#34;); delay(200); } // Take samples and return the average int ReadAxis(int axisPin) { long reading = 0; analogRead(axisPin); delay(1); for (int i = 0; i \u0026lt; sampleSize; i++) { reading += analogRead(axisPin); } return reading/sampleSize; } The serial interface should normally return values ​​like this:\nX, Y, Z :: 532, 578, 625 :: 0G, 0G, 1G X, Y, Z :: 530, 578, 627 :: 0G, 0G, 1G X, Y, Z :: 531, 577, 627 :: 0G, 0G, 1G X, Y, Z :: 530, 578, 625 :: 0G, 0G, 1G X, Y, Z :: 530, 578, 625 :: 0G, 0G, 1G X, Y, Z :: 531, 577, 626 :: 0G, 0G, 1G X, Y, Z :: 530, 577, 627 :: 0G, 0G, 1G X, Y, Z :: 531, 577, 625 :: 0G, 0G, 1G X, Y, Z :: 531, 576, 627 :: 0G, 0G, 1G X, Y, Z :: 533, 577, 626 :: 0G, 0G, 1G X, Y, Z :: 531, 578, 626 :: 0G, 0G, 1G Our sensor is now measuring acceleration!\n","date":"2024-03-02T00:00:00Z","image":"https://albanpetit.com/post/adxl-335-accelerometer/main_hu_cade50dcbdc6879e.jpg","permalink":"https://albanpetit.com/post/adxl-335-accelerometer/","title":"ADXL335 Accelerometer"},{"content":"Remote access to your Raspberry Pi is crucial to simplify management without the need for a physical screen, keyboard, or mouse. Configuring SSH (Secure Shell) access is a crucial step in establishing a secure connection with your Raspberry Pi.\nSimilar to the Wi-Fi configuration, you can configure some important elements of the SSH server even before the first boot of the Raspberry using the Raspberry Pi Imager utility.\nopenssh-server Before you begin, ensure that your Raspberry Pi is equipped with a compatible operating system. Commonly used systems like Raspbian support SSH right from the installation. Also, make sure your Raspberry Pi is connected to your local network. You can check the proper functioning of the SSH server on your Raspberry with the following command:\nsudo systemctl status sshd.service If the SSH server is working correctly, the response to this command should look like this: If the command returns an error like: Unit sshd.service could not be found., it is necessary to install the SSH server. The following commands can help you with that:\nsudo apt update sudo apt upgrade sudo apt install openssh-server SSH Activation The easiest way to enable the SSH service is to use the raspi-config tool from the Raspberry Foundation. To do this, follow these steps:\nOpen a terminal on your Raspberry Pi. Type the following command to open the configuration tool: sudo raspi-config Select the Interface Options option. Navigate to SSH and press Enter. Choose Yes to enable the SSH service. Press Finish to exit the configuration tool. For the next steps, you need to know the IP address of the Raspberry on your network. You can use the interface of your network router or the following command on the Raspberry:\nhostname -I | awk \u0026#39;{print $1}\u0026#39; SSH Connection from Another Device Once the SSH service is enabled, you can connect to your Raspberry Pi from another computer on the same network. Use the IP address of your Raspberry Pi to establish the SSH connection. The standard command is as follows (replace address_ip with the actual address):\nssh pi@address_ip You will be prompted to enter the default password, which is usually raspberry for the pi user.\nChanging the Default Password It is highly recommended to change the default password of your Raspberry Pi to enhance security. Use the following command to change the password for the pi user:\npasswd Follow the instructions to set a strong new password.\nAdvanced Configuration For security measures, you can make some additional modifications.\nUse of SSH Keys Using an SSH key on your Raspberry Pi is an excellent practice to secure remote access to your device. This eliminates the need to enter a password every time you connect via SSH, while enhancing the security of your connection.\nKey Pair Generation On Your Computer:\nUse the following command to generate a key pair: ssh-keygen -t rsa Follow the on-screen instructions. Simply press Enter to accept the default settings unless you want to specify a different location or filename. Copy the Public Key to the Raspberry Pi:\nUse the following command to copy the public key to your Raspberry Pi (replace pi and address_ip with your username and the IP address of your Raspberry Pi): ssh-copy-id pi@address_ip You will be prompted to enter the password for your Raspberry Pi. SSH Connection with the Key Now you should be able to connect to your Raspberry Pi without being prompted for a password:\nssh pi@raspberrypi You should be connected without entering a password.\nDisabling Password Authentication (Optional): To enhance security, you can disable password authentication on your Raspberry Pi. Edit the SSH configuration file:\nsudo nano /etc/ssh/sshd_config Change PasswordAuthentication yes to PasswordAuthentication no, then restart the SSH service:\nsudo systemctl restart sshd.service Changing the SSH Port The default SSH port on all servers is port 22. Changing this port makes automated attacks more difficult. To make this change, edit the /etc/ssh/sshd_config file with administrator rights:\nsudo nano /etc/ssh/sshd_config You can then remove the # on the line #Port 22 and change the value 22 to the port of your choice between 1024 and 65536. Save and exit nano with the keyboard shortcuts: ctrl+o, ctrl+x.\nNext, you need to restart openssh-server to apply the changes:\nsudo systemctl restart sshd.service Connecting to your Raspberry will be done with a new parameter to specify the connection port (replace pi with your username, address_ip with the actual IP address, and port_de_connexion with the new port):\nssh pi@address_ip -p port_de_connexion Configuring SSH on your Raspberry Pi is an essential step to ensure secure remote access. By following these simple steps, you enhance the management of your Raspberry Pi while reinforcing the security of your system. Feel free to explore advanced options to further customize your SSH configuration based on your specific needs.\n","date":"2024-01-05T00:00:00Z","image":"https://albanpetit.com/post/raspberry-ssh-config/main_hu_ad48d36ed28fb1b9.jpg","permalink":"https://albanpetit.com/post/raspberry-ssh-config/","title":"Raspberry SSH configuration"},{"content":"The Raspberry Pi is a fantastic microcomputer that, thanks to its versatility, is used in various projects, from home automation to the creation of personal servers. Configuring WiFi on these devices is almost essential to fully exploit their capabilities. Users have two main options: configuration before or after the first boot. This is generally a crucial step, especially when using Raspbian Lite, which lacks a graphical interface and requires an SSH connection for usage.\nRaspberry Pi Imager This section focuses on configuring Wi-Fi and SSH even before the first Raspberry startup. Thanks to the Raspberry Pi Foundation, there\u0026rsquo;s no longer a need for a keyboard and screen. They provide a utility available on all platforms—Windows, Apple, and Linux—that enables the creation of functional SD cards with multiple operating systems. Besides writing OS images, this utility even allows the configuration of essential elements for setting up a Raspberry Pi.\nYou can download this utility directly from the Raspberry Pi software page: Raspberry Software. Simply select the operating system you want to use and your storage device (SD card or USB), then press WRITE to start writing the image to the device.\nAdvanced Options At the bottom right of the interface, a gear-shaped button provides access to the advanced functions of this utility. Within these functions, you can configure SSH, the name of the Raspberry Pi on the network, and also the necessary information for it to connect to the Wi-Fi network:\nYou\u0026rsquo;ll need to fill in the SSID, the network password, and the location of the router emitting the Wi-Fi signal. During its first startup and all subsequent ones, the Raspberry Pi that hosts this SD card will be able to connect to Wi-Fi using the information entered during the image writing.\nThe SSID, an acronym for service set identifier, is the name of a wireless network according to IEEE 802.11 standards. This name consists of a character string of 0 to 32 octets.\nCommand Line Configuration The Raspberry Pi Imager application allows configuring Wi-Fi even before the first Raspberry startup. However, sometimes this configuration must be done after startup. In this case, several options are available to us: a fully manual command-line configuration or the utility: Raspi-config.\nManual Configuration First, it is necessary to configure the network interfaces. For this, the default text file editing utility in Raspbian, nano, will help us:\nsudo nano /etc/network/interfaces This file lists all existing network interfaces, so it probably won\u0026rsquo;t be empty. Add a line at the top of the file:\nauto wlan0 Next, allow the Raspberry Pi to use Wi-Fi as the method of connecting to the internet and use the configuration file /etc/wpa_supplicant/wpa_supplicant.conf. Also, add the following lines to the end of the same file:\nallow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf iface default inet dhcp Save the changes and then exit nano with the following shortcuts: ctrl+o, ctrl+x.\nThe rest of the configuration takes place in the file /etc/wpa_supplicant/wpa_supplicant.conf:\nsudo nano /etc/wpa_supplicant/wpa_supplicant.conf This file is probably not empty either. Add the following configuration lines to the end of the file (making sure to change NETWORK_NAME and PASSWORD):\ncountry=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\u0026#34;NETWORK_NAME\u0026#34; psk=\u0026#34;PASSWORD\u0026#34; } Similarly, save the file and exit nano using the shortcuts: ctrl+o, ctrl+x.\nFollowing this, the configuration should be operational. A restart will verify it:\nsudo reboot To check the connection after a restart, a simple ping will do:\nping google.com Here\u0026rsquo;s the expected response:\nRaspi-config The Raspberry Pi Foundation also provides a tool to facilitate this type of configuration. Although it is less comprehensive than manual configuration, it is much simpler to use: Raspi-config.\nsudo raspi-config Here\u0026rsquo;s the interface that opens up. It allows configuration for many things, but concerning Wi-Fi, it is available in System Options, then Wireless Lan:\nRaspi-config will then ask to configure the country in which the Raspberry will be used:\nThe utility will then ask for the SSID and password of the network.\nNow, simply exit the tool to apply the configuration. The Raspberry will connect automatically upon each restart.\nStatic IP? The goal of this kind of configuration is generally to use the Raspberry without a keyboard or mouse, with an SSH connection. Therefore, it is essential to ensure that it does not change its IP address.\nThe interface configuration still takes place in /etc/network/interfaces:\nsudo nano /etc/network/interfaces Change the line iface wlan0 inet dhcp to iface wlan0 inet static. This will change the wlan0 interface from DHCP to static. In the same file, add the following configuration lines just before wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf:\naddress 192.168.1.155 # Desired static IP netmask 255.255.255.0 gateway 192.168.1.1 # Router IP The file /etc/network/interfaces should now look something like this after all configurations:\nauto wlan0 iface lo inet loopback iface eth0 inet dhcp allow-hotplug wlan0 iface wlan0 inet static address 192.168.1.155 netmask 255.255.255.0 gateway 192.168.1.1 wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf iface default inet dhcp A restart of the Raspberry will confirm the proper functioning of the configuration:\nsudo reboot ","date":"2023-12-26T00:00:00Z","image":"https://albanpetit.com/post/raspberry-wifi-config/main_hu_49c6fef71a72b4ee.jpg","permalink":"https://albanpetit.com/post/raspberry-wifi-config/","title":"Raspberry wifi configuration"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://albanpetit.com/post/","title":""}]